This project extends XV6 by implementing kernel level threads and user functions to streamline their use. This document will go over how a user can use this new functionality, and what is occuring when certain functions are called. 

A user would begin using these features by first declaring a function they wish to run with multiple threads. In the main of their project they will call int thread_create(void (*start_routine)(void*), void *arg), the first argument would contain a pointer to the function they desire to run, the second accepts a single argument to be passed in said function. The thread_create function then allocates and checks that memory for the thread stack is properly in place and then calls int clone(void(*fcn)(void*),void *arg, void *stack), which takes the original two arguments from thread_create, and the newly allocated stack pointer. The clone function is closely related to fork and is responsible for creating a new process with its own independent stack but points to pgdir shared by all related threads. 
    
The second user feature that was implemented were spin locks. These are here to allow the user to dictate which zones in their 
code will be considered critical areas by threads and will only be allowed to be accessed by one thread at a time. Three 
different user functions, and a structure definition were added in order to create this functionality: 

    lock_create(thread_lock *tloc)
    lock_set(thread_lock *tloc)
    lock_release(thread_lock *tloc)

    typedef struct _thread_lock {
		uint locked; 
    } thread_lock;

In order to use the spin lock feature a user must first globally declare a thread_lock structure, and then 
lock_create(user created lock structure) in their main, prior to thread_create. Once this is in place the user can add 
thread_set and thread_release in the function they wish to thread in the areas they deem appropriate. 

Finally, the final user function added was int thread_join(), this function calls join() which returns the pid of a completed 
thread and returns it in order to clear the stack. A thread_join() must be called at the end of main for each thread initially
created or else you may end up with a zombie process. 

To run the program:

you will need a Virtual Machine running Linux, and install Qemu. The following link has more in depth details in doing so.
https://www.cs.ucr.edu/~csong/cs153/19f/xv6.html

Once you have linux and qemu installed.

When you cd into your desired directory type the following into your command line

Git clone https://github.com/khoavo58/kernel-level-threading.git

~Cd cs_179
~make qemu
